"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationDeployments = exports.Deployments = void 0;
const cdk_assets = require("cdk-assets");
const cdk_assets_1 = require("cdk-assets");
const chalk = require("chalk");
const logging_1 = require("../logging");
const credentials_1 = require("./aws-auth/credentials");
const deploy_stack_1 = require("./deploy-stack");
const environment_resources_1 = require("./environment-resources");
const nested_stack_helpers_1 = require("./nested-stack-helpers");
const cloudformation_1 = require("./util/cloudformation");
const placeholders_1 = require("./util/placeholders");
const template_body_parameter_1 = require("./util/template-body-parameter");
const asset_manifest_builder_1 = require("../util/asset-manifest-builder");
const asset_publishing_1 = require("../util/asset-publishing");
/**
 * Scope for a single set of deployments from a set of Cloud Assembly Artifacts
 *
 * Manages lookup of SDKs, Bootstrap stacks, etc.
 */
class Deployments {
    constructor(props) {
        this.props = props;
        this.sdkCache = new Map();
        this.publisherCache = new Map();
        this.sdkProvider = props.sdkProvider;
        this.environmentResources = new environment_resources_1.EnvironmentResourcesRegistry(props.toolkitStackName);
    }
    /**
     * Resolves the environment for a stack.
     */
    async resolveEnvironment(stack) {
        return this.sdkProvider.resolveEnvironment(stack.environment);
    }
    async readCurrentTemplateWithNestedStacks(rootStackArtifact, retrieveProcessedTemplate = false) {
        const sdk = (await this.prepareSdkWithLookupOrDeployRole(rootStackArtifact)).stackSdk;
        return (0, nested_stack_helpers_1.loadCurrentTemplateWithNestedStacks)(rootStackArtifact, sdk, retrieveProcessedTemplate);
    }
    async readCurrentTemplate(stackArtifact) {
        (0, logging_1.debug)(`Reading existing template for stack ${stackArtifact.displayName}.`);
        const sdk = (await this.prepareSdkWithLookupOrDeployRole(stackArtifact)).stackSdk;
        return (0, nested_stack_helpers_1.loadCurrentTemplate)(stackArtifact, sdk);
    }
    async resourceIdentifierSummaries(stackArtifact) {
        (0, logging_1.debug)(`Retrieving template summary for stack ${stackArtifact.displayName}.`);
        // Currently, needs to use `deploy-role` since it may need to read templates in the staging
        // bucket which have been encrypted with a KMS key (and lookup-role may not read encrypted things)
        const { stackSdk, resolvedEnvironment, envResources } = await this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForReading);
        const cfn = stackSdk.cloudFormation();
        // Upload the template, if necessary, before passing it to CFN
        const cfnParam = await (0, template_body_parameter_1.makeBodyParameter)(stackArtifact, resolvedEnvironment, new asset_manifest_builder_1.AssetManifestBuilder(), envResources, stackSdk);
        const response = await cfn.getTemplateSummary(cfnParam).promise();
        if (!response.ResourceIdentifierSummaries) {
            (0, logging_1.debug)('GetTemplateSummary API call did not return "ResourceIdentifierSummaries"');
        }
        return response.ResourceIdentifierSummaries ?? [];
    }
    async deployStack(options) {
        let deploymentMethod = options.deploymentMethod;
        if (options.changeSetName || options.execute !== undefined) {
            if (deploymentMethod) {
                throw new Error('You cannot supply both \'deploymentMethod\' and \'changeSetName/execute\'. Supply one or the other.');
            }
            deploymentMethod = {
                method: 'change-set',
                changeSetName: options.changeSetName,
                execute: options.execute,
            };
        }
        const { stackSdk, resolvedEnvironment, cloudFormationRoleArn, envResources, } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        // Do a verification of the bootstrap stack version
        await this.validateBootstrapStackVersion(options.stack.stackName, options.stack.requiresBootstrapStackVersion, options.stack.bootstrapStackVersionSsmParameter, envResources);
        return (0, deploy_stack_1.deployStack)({
            stack: options.stack,
            resolvedEnvironment,
            deployName: options.deployName,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: stackSdk,
            sdkProvider: this.sdkProvider,
            roleArn: cloudFormationRoleArn,
            reuseAssets: options.reuseAssets,
            envResources,
            tags: options.tags,
            deploymentMethod,
            force: options.force,
            parameters: options.parameters,
            usePreviousParameters: options.usePreviousParameters,
            progress: options.progress,
            ci: options.ci,
            rollback: options.rollback,
            hotswap: options.hotswap,
            extraUserAgent: options.extraUserAgent,
            resourcesToImport: options.resourcesToImport,
            overrideTemplate: options.overrideTemplate,
            assetParallelism: options.assetParallelism,
        });
    }
    async destroyStack(options) {
        const { stackSdk, cloudFormationRoleArn: roleArn } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        return (0, deploy_stack_1.destroyStack)({
            sdk: stackSdk,
            roleArn,
            stack: options.stack,
            deployName: options.deployName,
            quiet: options.quiet,
            ci: options.ci,
        });
    }
    async stackExists(options) {
        let stackSdk;
        if (options.tryLookupRole) {
            stackSdk = (await this.prepareSdkWithLookupOrDeployRole(options.stack)).stackSdk;
        }
        else {
            stackSdk = (await this.prepareSdkFor(options.stack, undefined, credentials_1.Mode.ForReading)).stackSdk;
        }
        const stack = await cloudformation_1.CloudFormationStack.lookup(stackSdk.cloudFormation(), options.deployName ?? options.stack.stackName);
        return stack.exists;
    }
    async prepareSdkWithDeployRole(stackArtifact) {
        return this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForWriting);
    }
    async prepareSdkWithLookupOrDeployRole(stackArtifact) {
        // try to assume the lookup role
        try {
            const result = await this.prepareSdkWithLookupRoleFor(stackArtifact);
            if (result.didAssumeRole) {
                return {
                    resolvedEnvironment: result.resolvedEnvironment,
                    stackSdk: result.sdk,
                    envResources: result.envResources,
                };
            }
        }
        catch { }
        // fall back to the deploy role
        return this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForReading);
    }
    /**
     * Get the environment necessary for touching the given stack
     *
     * Returns the following:
     *
     * - The resolved environment for the stack (no more 'unknown-account/unknown-region')
     * - SDK loaded with the right credentials for calling `CreateChangeSet`.
     * - The Execution Role that should be passed to CloudFormation.
     */
    async prepareSdkFor(stack, roleArn, mode) {
        if (!stack.environment) {
            throw new Error(`The stack ${stack.displayName} does not have an environment`);
        }
        const resolvedEnvironment = await this.resolveEnvironment(stack);
        // Substitute any placeholders with information about the current environment
        const arns = await (0, placeholders_1.replaceEnvPlaceholders)({
            assumeRoleArn: stack.assumeRoleArn,
            // Use the override if given, otherwise use the field from the stack
            cloudFormationRoleArn: roleArn ?? stack.cloudFormationExecutionRoleArn,
        }, resolvedEnvironment, this.sdkProvider);
        const stackSdk = await this.cachedSdkForEnvironment(resolvedEnvironment, mode, {
            assumeRoleArn: arns.assumeRoleArn,
            assumeRoleExternalId: stack.assumeRoleExternalId,
            assumeRoleAdditionalOptions: stack.assumeRoleAdditionalOptions,
        });
        return {
            stackSdk: stackSdk.sdk,
            resolvedEnvironment,
            cloudFormationRoleArn: arns.cloudFormationRoleArn,
            envResources: this.environmentResources.for(resolvedEnvironment, stackSdk.sdk),
        };
    }
    /**
      * Try to use the bootstrap lookupRole. There are two scenarios that are handled here
      *  1. The lookup role may not exist (it was added in bootstrap stack version 7)
      *  2. The lookup role may not have the correct permissions (ReadOnlyAccess was added in
      *      bootstrap stack version 8)
      *
      * In the case of 1 (lookup role doesn't exist) `forEnvironment` will either:
      *   1. Return the default credentials if the default credentials are for the stack account
      *   2. Throw an error if the default credentials are not for the stack account.
      *
      * If we successfully assume the lookup role we then proceed to 2 and check whether the bootstrap
      * stack version is valid. If it is not we throw an error which should be handled in the calling
      * function (and fallback to use a different role, etc)
      *
      * If we do not successfully assume the lookup role, but do get back the default credentials
      * then return those and note that we are returning the default credentials. The calling
      * function can then decide to use them or fallback to another role.
      */
    async prepareSdkWithLookupRoleFor(stack) {
        const resolvedEnvironment = await this.sdkProvider.resolveEnvironment(stack.environment);
        // Substitute any placeholders with information about the current environment
        const arns = await (0, placeholders_1.replaceEnvPlaceholders)({
            lookupRoleArn: stack.lookupRole?.arn,
        }, resolvedEnvironment, this.sdkProvider);
        // try to assume the lookup role
        const warningMessage = `Could not assume ${arns.lookupRoleArn}, proceeding anyway.`;
        try {
            // Trying to assume lookup role and cache the sdk for the environment
            const stackSdk = await this.cachedSdkForEnvironment(resolvedEnvironment, credentials_1.Mode.ForReading, {
                assumeRoleArn: arns.lookupRoleArn,
                assumeRoleExternalId: stack.lookupRole?.assumeRoleExternalId,
                assumeRoleAdditionalOptions: stack.lookupRole?.assumeRoleAdditionalOptions,
            });
            const envResources = this.environmentResources.for(resolvedEnvironment, stackSdk.sdk);
            // if we succeed in assuming the lookup role, make sure we have the correct bootstrap stack version
            if (stackSdk.didAssumeRole && stack.lookupRole?.bootstrapStackVersionSsmParameter && stack.lookupRole.requiresBootstrapStackVersion) {
                const version = await envResources.versionFromSsmParameter(stack.lookupRole.bootstrapStackVersionSsmParameter);
                if (version < stack.lookupRole.requiresBootstrapStackVersion) {
                    throw new Error(`Bootstrap stack version '${stack.lookupRole.requiresBootstrapStackVersion}' is required, found version '${version}'. To get rid of this error, please upgrade to bootstrap version >= ${stack.lookupRole.requiresBootstrapStackVersion}`);
                }
            }
            else if (!stackSdk.didAssumeRole) {
                const lookUpRoleExists = stack.lookupRole ? true : false;
                (0, logging_1.warning)(`Lookup role ${lookUpRoleExists ? 'exists but' : 'does not exist, hence'} was not assumed. Proceeding with default credentials.`);
            }
            return { ...stackSdk, resolvedEnvironment, envResources };
        }
        catch (e) {
            (0, logging_1.debug)(e);
            // only print out the warnings if the lookupRole exists
            if (stack.lookupRole) {
                (0, logging_1.warning)(warningMessage);
            }
            // This error should be shown even if debug mode is off
            if (e instanceof Error && e.message.includes('Bootstrap stack version')) {
                (0, logging_1.error)(e.message);
            }
            throw (e);
        }
    }
    async prepareAndValidateAssets(asset, options) {
        const { envResources } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        await this.validateBootstrapStackVersion(options.stack.stackName, asset.requiresBootstrapStackVersion, asset.bootstrapStackVersionSsmParameter, envResources);
        const manifest = cdk_assets_1.AssetManifest.fromFile(asset.file);
        return { manifest, stackEnv: envResources.environment };
    }
    /**
     * Build all assets in a manifest
     *
     * @deprecated Use `buildSingleAsset` instead
     */
    async buildAssets(asset, options) {
        const { manifest, stackEnv } = await this.prepareAndValidateAssets(asset, options);
        await (0, asset_publishing_1.buildAssets)(manifest, this.sdkProvider, stackEnv, options.buildOptions);
    }
    /**
     * Publish all assets in a manifest
     *
     * @deprecated Use `publishSingleAsset` instead
     */
    async publishAssets(asset, options) {
        const { manifest, stackEnv } = await this.prepareAndValidateAssets(asset, options);
        await (0, asset_publishing_1.publishAssets)(manifest, this.sdkProvider, stackEnv, options.publishOptions);
    }
    /**
     * Build a single asset from an asset manifest
     */
    // eslint-disable-next-line max-len
    async buildSingleAsset(assetArtifact, assetManifest, asset, options) {
        const { resolvedEnvironment, envResources } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        await this.validateBootstrapStackVersion(options.stack.stackName, assetArtifact.requiresBootstrapStackVersion, assetArtifact.bootstrapStackVersionSsmParameter, envResources);
        const publisher = this.cachedPublisher(assetManifest, resolvedEnvironment, options.stackName);
        await publisher.buildEntry(asset);
        if (publisher.hasFailures) {
            throw new Error(`Failed to build asset ${asset.id}`);
        }
    }
    /**
     * Publish a single asset from an asset manifest
     */
    // eslint-disable-next-line max-len
    async publishSingleAsset(assetManifest, asset, options) {
        const { resolvedEnvironment: stackEnv } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        // No need to validate anymore, we already did that during build
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        await publisher.publishEntry(asset);
        if (publisher.hasFailures) {
            throw new Error(`Failed to publish asset ${asset.id}`);
        }
    }
    /**
     * Return whether a single asset has been published already
     */
    async isSingleAssetPublished(assetManifest, asset, options) {
        const { resolvedEnvironment: stackEnv } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        return publisher.isEntryPublished(asset);
    }
    /**
     * Validate that the bootstrap stack has the right version for this stack
     *
     * Call into envResources.validateVersion, but prepend the stack name in case of failure.
     */
    async validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter, envResources) {
        try {
            await envResources.validateVersion(requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter);
        }
        catch (e) {
            throw new Error(`${stackName}: ${e.message}`);
        }
    }
    async cachedSdkForEnvironment(environment, mode, options) {
        const cacheKeyElements = [
            environment.account,
            environment.region,
            `${mode}`,
            options?.assumeRoleArn ?? '',
            options?.assumeRoleExternalId ?? '',
        ];
        if (options?.assumeRoleAdditionalOptions) {
            cacheKeyElements.push(JSON.stringify(options.assumeRoleAdditionalOptions));
        }
        const cacheKey = cacheKeyElements.join(':');
        const existing = this.sdkCache.get(cacheKey);
        if (existing) {
            return existing;
        }
        const ret = await this.sdkProvider.forEnvironment(environment, mode, options);
        this.sdkCache.set(cacheKey, ret);
        return ret;
    }
    cachedPublisher(assetManifest, env, stackName) {
        const existing = this.publisherCache.get(assetManifest);
        if (existing) {
            return existing;
        }
        const prefix = stackName ? `${chalk.bold(stackName)}: ` : '';
        const publisher = new cdk_assets.AssetPublishing(assetManifest, {
            aws: new asset_publishing_1.PublishingAws(this.sdkProvider, env),
            progressListener: new ParallelSafeAssetProgress(prefix, this.props.quiet ?? false),
        });
        this.publisherCache.set(assetManifest, publisher);
        return publisher;
    }
}
exports.Deployments = Deployments;
/**
 * Asset progress that doesn't do anything with percentages (currently)
 */
class ParallelSafeAssetProgress {
    constructor(prefix, quiet) {
        this.prefix = prefix;
        this.quiet = quiet;
    }
    onPublishEvent(type, event) {
        const handler = this.quiet && type !== 'fail' ? logging_1.debug : asset_publishing_1.EVENT_TO_LOGGER[type];
        handler(`${this.prefix}${type}: ${event.message}`);
    }
}
/**
 * @deprecated Use 'Deployments' instead
 */
class CloudFormationDeployments extends Deployments {
}
exports.CloudFormationDeployments = CloudFormationDeployments;
//# sourceMappingURL=data:application/json;base64,